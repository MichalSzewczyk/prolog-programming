emptyBoard([['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.']]).

/* Function responsible for printing the whole board. */
printBoard([]).
printBoard([E|L]):- printRow(E, ""), printBoard(L).

/* Function responsible for printing of the single row. */
printRow([E|L], ACC):- string_concat(ACC, E, R1), printRow(L, R1).
printRow([], ACC):- writeln(ACC).

/* Function responsible for adding pieces into board */
putPiecesOnBoard(B1, [piece(X, Y, V)|Pieces], B3):-replaceElementInMatrix(B1, Y, X, V, B2), putPiecesOnBoard(B2, Pieces, B3).
putPiecesOnBoard(B, [], B).

/* Function responsible for replacing single element at given position on board */
replaceElementInMatrix([ROW|ROWS], X, Y, V, [ROW|RESULT_ROWS]):-Y1 is Y-1, replaceElementInMatrix(ROWS, X, Y1, V, RESULT_ROWS).
replaceElementInMatrix([ROW|ROWS], X, 0, V, [RESULT_ROW|ROWS]):-replaceElementInRow(ROW, X, V, RESULT_ROW).

/* Function responsible for replacing single element at given position on row */
replaceElementInRow([ELEMENT|ROW], X, V, [ELEMENT|RESULT_ROW]):-X1 is X-1, replaceElementInRow(ROW, X1, V, RESULT_ROW).
replaceElementInRow([_|ROW], 0, V, [V|ROW]).

isSafe(B, X, Y):-isVerticallySafe(B, X, Y).
    /*isHorizonallySafe(B, Y), isTopDownSafe(B, X, Y), isBottomUpSafe(B, X, Y).*/

isVerticallySafe(B, X, Y):- isVerticallySafe(B, 0, X, Y).
isVerticallySafe(B, IDX, X, Y):- nth0(Y, B, ROW), nth0(IDX, ROW, ELEM), ELEM == '.', print('here'), IDX1 is IDX + 1, print(IDX1), print(X), isVerticallySafe(B, IDX1, X, Y).
isVerticallySafe(B, X, X, Y):-print(' not here'), print(X), IDX1 is X + 1, isVerticallySafe(B, IDX1, X, Y).
isVerticallySafe(_, 9, _, _).


