emptyBoard([['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.']]).

/* Function responsible for printing the whole board. */
printBoard([]).
printBoard([E|L]):- printRow(E, ""), printBoard(L).

/* Function responsible for printing of the single row. */
printRow([E|L], ACC):- string_concat(ACC, E, R1), printRow(L, R1).
printRow([], ACC):- writeln(ACC).

/* Function responsible for adding pieces into board */
putPiecesOnBoard(B1, [piece(X, Y, V)|Pieces], B3):-replaceElementInMatrix(B1, Y, X, V, B2), putPiecesOnBoard(B2, Pieces, B3).
putPiecesOnBoard(B, [], B).

/* Function responsible for replacing single element at given position on board */
replaceElementInMatrix([ROW|ROWS], X, Y, V, [ROW|RESULT_ROWS]):-Y1 is Y-1, replaceElementInMatrix(ROWS, X, Y1, V, RESULT_ROWS).
replaceElementInMatrix([ROW|ROWS], X, 0, V, [RESULT_ROW|ROWS]):-replaceElementInRow(ROW, X, V, RESULT_ROW).

/* Function responsible for replacing single element at given position on row */
replaceElementInRow([ELEMENT|ROW], X, V, [ELEMENT|RESULT_ROW]):-X1 is X-1, replaceElementInRow(ROW, X1, V, RESULT_ROW).
replaceElementInRow([_|ROW], 0, V, [V|ROW]).

isSafe(B, X, Y):-isHorizonallySafe(B, X, Y), isVerticallySafe(B, X, Y), isTopDownSafe(B, X, Y), isBottomUpSafe(B, X, Y).

isHorizonallySafe(B, X, Y):- isHorizonallySafe(B, 0, X, Y).
isHorizonallySafe(B, IDX, X, Y):- IDX == 8; IDX < 8, ((IDX \= X, nth0(Y, B, ROW), nth0(IDX, ROW, ELEM), ELEM == '.'; IDX == X), IDX1 is IDX + 1, isHorizonallySafe(B, IDX1, X, Y)).

isVerticallySafe(B, X, Y):- isVerticallySafe(B, 0, X, Y).
isVerticallySafe(B, IDX, X, Y):- IDX == 8; IDX < 8, ((IDX \= Y, nth0(IDX, B, ROW), nth0(X, ROW, ELEM), ELEM == '.'; IDX == Y), IDX1 is IDX + 1, isVerticallySafe(B, IDX1, X, Y)).

isTopDownSafe(B, X, Y):- X > Y, IDX_X is X - Y, isTopDownSafe(B, IDX_X, 0, X, Y) ; X =< Y, IDX_Y is Y - X, isTopDownSafe(B, 0, IDX_Y, X, Y) .
isTopDownSafe(B, IDX_X, IDX_Y, X, Y):- IDX_X == 8 ; IDX_Y == 8; IDX_X < 8, IDX_Y < 8, ((IDX_X \= X, IDX_Y \= Y, nth0(IDX_Y, B, ROW), nth0(IDX_X, ROW, ELEM), ELEM == '.'; IDX_Y == Y, IDX_X == X), IDX1_X is IDX_X + 1, IDX1_Y is IDX_Y + 1, isTopDownSafe(B, IDX1_X, IDX1_Y, X, Y)).

isBottomUpSafe(B, X, Y):- X > Y, IDX_Y is 7 - X + Y, isBottomUpSafe(B, 7, IDX_Y, X, Y) ; X =< Y, IDX_X is 7 - Y + X, isBottomUpSafe(B, IDX_X, 7, X, Y) .
isBottomUpSafe(B, IDX_X, IDX_Y, X, Y):- IDX_X == 0 ; IDX_Y == 0; IDX_X >= 0, IDX_Y >= 0, ((IDX_X \= X, IDX_Y \= Y, nth0(IDX_Y, B, ROW), nth0(IDX_X, ROW, ELEM), ELEM == '.'; (IDX_Y == Y, IDX_X == X)), IDX1_X is IDX_X - 1, IDX1_Y is IDX_Y - 1, isBottomUpSafe(B, IDX1_X, IDX1_Y, X, Y)).

move(B1, [FromI,FromJ], [ToI, ToJ], B2 ):- isAllowed(FromI,FromJ, ToI, ToJ), print('isAllowed called'), nth0(FromJ, B1, ROW), nth0(FromI, ROW, ELEM), doMove(B1, ELEM, FromI,FromJ, ToI, ToJ, B2) ; B2 is B1.
isAllowed(FromI,FromJ, ToI, ToJ):- FromI = ToI; FromJ = ToJ; R1 is FromJ - FromI, R2 is ToJ - ToI, R1 = R2; R3 is FromI + FromJ, R4 is ToI + ToJ, R3 is R4.
doMove(B1, ELEM, FromI,FromJ, ToI, ToJ, B2):- 
print('here 8'), FromI=ToI, FromJ>=ToJ, moveToDown(B1, ELEM, FromI, FromJ, ToI, ToJ, B2);
     print('here 7'), FromI=ToI, FromJ<ToJ, moveToUp(B1, ELEM, FromI,FromJ, ToI, ToJ, B2);
    print('here 6'), FromJ=ToJ, FromI<ToI, moveToRight(B1, ELEM, FromI,FromJ, ToI, ToJ, B2);
    print('here 5'), FromJ=ToJ, FromI>=ToI, moveToLeft(B1, ELEM, FromI,FromJ, ToI, ToJ, B2);
    print('here 4 ' + FromJ+FromI+ToJ+ToI), R1 is FromJ-FromI, R2 is ToJ-ToI, print(R1 + R2), R1==R2, print('here!'), FromJ<ToJ, moveTopDownForward(B1, ELEM, FromI,FromJ, ToI, ToJ, B2); 
	print('here 3'), R1 is FromJ-FromI, R2 is ToJ-ToI, R1=R2, FromJ>=ToJ, moveTopDownBackward(B1, ELEM, FromI,FromJ, ToI, ToJ, B2); 
    print('here 2'), R1 is FromI+FromJ, R2 is ToI+ToJ, R1 = R2, FromJ<ToJ, moveBottomUpForward(B1, ELEM, FromI,FromJ, ToI, ToJ, B2); 
    print('here 1'), R1 is FromI+FromJ, R2 is ToI+ToJ, R1 = R2, print('test!'), FromJ>=ToJ,moveBottomUpBackward(B1, ELEM, FromI,FromJ, ToI, ToJ, B2).
	
moveToDown(B1, ELEM, CUR_I, CUR_J, ToI, ToJ, B2):-print('moveToDown'), replaceElementInMatrix(B1, CUR_I, CUR_J, '.', RESULT_B), NEXT_J is CUR_J - 1, moveToDown(RESULT_B, ELEM, CUR_I, NEXT_J, ToI, ToJ, B2).
moveToDown(B1, ELEM, I, J, I, J, RESULT_B):-replaceElementInMatrix(B1, I, J, ELEM, RESULT_B).
moveToUp(B1, ELEM, CUR_I, CUR_J, ToI, ToJ, B2):-print('moveToUp'), replaceElementInMatrix(B1, CUR_I, CUR_J, '.', RESULT_B), NEXT_J is CUR_J + 1, moveToUp(RESULT_B, ELEM, CUR_I, NEXT_J, ToI, ToJ, B2).
moveToUp(B1, ELEM, I, J, I, J, RESULT_B):-replaceElementInMatrix(B1, I, J, ELEM, RESULT_B).
moveToRight(B1, ELEM, CUR_I, CUR_J, ToI, ToJ, B2):-print('moveToRight'), replaceElementInMatrix(B1, CUR_I, CUR_J, '.', RESULT_B), NEXT_I is CUR_I + 1, moveToRight(RESULT_B, ELEM, NEXT_I, CUR_J, ToI, ToJ, B2).
moveToRight(B1, ELEM, I, J, I, J, RESULT_B):-replaceElementInMatrix(B1, I, J, ELEM, RESULT_B).
moveToLeft(B1, ELEM, CUR_I, CUR_J, ToI, ToJ, B2):-print('moveToLeft'), replaceElementInMatrix(B1, CUR_I, CUR_J, '.', RESULT_B), NEXT_I is CUR_I - 1, moveToLeft(RESULT_B, ELEM, NEXT_I, CUR_J, ToI, ToJ, B2).
moveToLeft(B1, ELEM, I, J, I, J, RESULT_B):-replaceElementInMatrix(B1, I, J, ELEM, RESULT_B).
moveTopDownForward(B1, ELEM, CUR_I, CUR_J, ToI, ToJ, B2):-print('moveTopDownForward' + CUR_I + CUR_J), replaceElementInMatrix(B1, CUR_I, CUR_J, '.', RESULT_B), NEXT_I is CUR_I + 1, NEXT_J is CUR_J + 1, moveTopDownForward(RESULT_B, ELEM, NEXT_I, NEXT_J, ToI, ToJ, B2).
moveTopDownForward(B1, ELEM, I, J, I, J, RESULT_B):-replaceElementInMatrix(B1, I, J, ELEM, RESULT_B).
moveTopDownBackward(B1, ELEM, CUR_I, CUR_J, ToI, ToJ, B2):-print('moveTopDownBackward'), replaceElementInMatrix(B1, CUR_I, CUR_J, '.', RESULT_B), NEXT_I is CUR_I - 1, NEXT_J is CUR_J - 1, moveTopDownBackward(RESULT_B, ELEM, NEXT_I, NEXT_J, ToI, ToJ, B2).
moveTopDownBackward(B1, ELEM, I, J, I, J, RESULT_B):-replaceElementInMatrix(B1, I, J, ELEM, RESULT_B).
moveBottomUpForward(B1, ELEM, CUR_I, CUR_J, ToI, ToJ, B2):-print('Bottom-up forward'), replaceElementInMatrix(B1, CUR_I, CUR_J, '.', RESULT_B), NEXT_I is CUR_I - 1, NEXT_J is CUR_J + 1, moveBottomUpForward(RESULT_B, ELEM, NEXT_I, NEXT_J, ToI, ToJ, B2).
moveBottomUpForward(B1, ELEM, I, J, I, J, RESULT_B):-replaceElementInMatrix(B1, I, J, ELEM, RESULT_B).
moveBottomUpBackward(B1, ELEM, CUR_I, CUR_J, ToI, ToJ, B2):-print('Bottom-up backward'+ CUR_I + CUR_J), replaceElementInMatrix(B1, CUR_I, CUR_J, '.', RESULT_B), NEXT_I is CUR_I + 1, NEXT_J is CUR_J - 1, moveBottomUpBackward(RESULT_B, ELEM, NEXT_I, NEXT_J, ToI, ToJ, B2).
moveBottomUpBackward(B1, ELEM, I, J, I, J, RESULT_B):-print('finished'), replaceElementInMatrix(B1, I, J, ELEM, RESULT_B).
