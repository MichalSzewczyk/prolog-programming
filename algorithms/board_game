emptyBoard([['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.'],
['.','.','.','.','.','.','.','.']]).

/* Function responsible for printing the whole board. */
printBoard([]).
printBoard([E|L]):- printRow(E, ""), printBoard(L).

/* Function responsible for printing of the single row. */
printRow([E|L], ACC):- string_concat(ACC, E, R1), printRow(L, R1).
printRow([], ACC):- writeln(ACC).

/* Function responsible for adding pieces into board */
putPiecesOnBoard(B1, [piece(X, Y, V)|Pieces], B3):-replaceElementInMatrix(B1, Y, X, V, B2), putPiecesOnBoard(B2, Pieces, B3).
putPiecesOnBoard(B, [], B).

/* Function responsible for replacing single element at given position on board */
replaceElementInMatrix([ROW|ROWS], X, Y, V, [ROW|RESULT_ROWS]):-Y1 is Y-1, replaceElementInMatrix(ROWS, X, Y1, V, RESULT_ROWS).
replaceElementInMatrix([ROW|ROWS], X, 0, V, [RESULT_ROW|ROWS]):-replaceElementInRow(ROW, X, V, RESULT_ROW).

/* Function responsible for replacing single element at given position on row */
replaceElementInRow([ELEMENT|ROW], X, V, [ELEMENT|RESULT_ROW]):-X1 is X-1, replaceElementInRow(ROW, X1, V, RESULT_ROW).
replaceElementInRow([_|ROW], 0, V, [V|ROW]).

isSafe(B, X, Y):-isHorizonallySafe(B, X, Y), isVerticallySafe(B, X, Y), isTopDownSafe(B, X, Y), isBottomUpSafe(B, X, Y).

isHorizonallySafe(B, X, Y):- isHorizonallySafe(B, 0, X, Y).
isHorizonallySafe(B, IDX, X, Y):- IDX == 8; IDX < 8, ((IDX \= X, nth0(Y, B, ROW), nth0(IDX, ROW, ELEM), ELEM == '.'; IDX == X), IDX1 is IDX + 1, isHorizonallySafe(B, IDX1, X, Y)).

isVerticallySafe(B, X, Y):- isVerticallySafe(B, 0, X, Y).
isVerticallySafe(B, IDX, X, Y):- IDX == 8; IDX < 8, ((IDX \= Y, nth0(IDX, B, ROW), nth0(X, ROW, ELEM), ELEM == '.'; IDX == Y), IDX1 is IDX + 1, isVerticallySafe(B, IDX1, X, Y)).

isTopDownSafe(B, X, Y):- X > Y, IDX_X is X - Y, isTopDownSafe(B, IDX_X, 0, X, Y) ; X =< Y, IDX_Y is Y - X, isTopDownSafe(B, 0, IDX_Y, X, Y) .
isTopDownSafe(B, IDX_X, IDX_Y, X, Y):- IDX_X == 8 ; IDX_Y == 8; IDX_X < 8, IDX_Y < 8, ((IDX_X \= X, IDX_Y \= Y, nth0(IDX_Y, B, ROW), nth0(IDX_X, ROW, ELEM), ELEM == '.'; IDX_Y == Y, IDX_X == X), IDX1_X is IDX_X + 1, IDX1_Y is IDX_Y + 1, isTopDownSafe(B, IDX1_X, IDX1_Y, X, Y)).

isBottomUpSafe(B, X, Y):- X > Y, IDX_Y is 7 - X + Y, isBottomUpSafe(B, 7, IDX_Y, X, Y) ; X =< Y, IDX_X is 7 - Y + X, isBottomUpSafe(B, IDX_X, 7, X, Y) .
isBottomUpSafe(B, IDX_X, IDX_Y, X, Y):- IDX_X == 0 ; IDX_Y == 0; IDX_X >= 0, IDX_Y >= 0, ((IDX_X \= X, IDX_Y \= Y, nth0(IDX_Y, B, ROW), nth0(IDX_X, ROW, ELEM), ELEM == '.'; (IDX_Y == Y, IDX_X == X)), IDX1_X is IDX_X - 1, IDX1_Y is IDX_Y - 1, isBottomUpSafe(B, IDX1_X, IDX1_Y, X, Y)).